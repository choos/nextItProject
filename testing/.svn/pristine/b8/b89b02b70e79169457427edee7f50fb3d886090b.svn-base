package com.zero.purchase.web;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.zero.login.vo.UserVO;
import com.zero.market.service.IMarketService;
import com.zero.market.vo.MarketVO;
import com.zero.member.service.IMemberService;
import com.zero.member.vo.MemberVO;
import com.zero.purchase.service.IPurchaseService;
import com.zero.purchase.vo.PurchaseSearchVO;
import com.zero.purchase.vo.PurchaseVO;

@Controller
@RequestMapping("/purchase")
public class PurchaseController {

	private final Logger logger = LoggerFactory.getLogger(getClass());

	@Autowired
	private IPurchaseService purchaseService;
	
	@Autowired
	private IMemberService memberService;
	
	@Autowired
	private IMarketService iMarketService;

	@RequestMapping(value = "/purchaseList")
	public String main(ModelMap model, PurchaseSearchVO searchVO, HttpSession session) {
		try {
			logger.debug("session = {}", session.getAttribute("USER_INFO"));

			UserVO user = (UserVO) session.getAttribute("USER_INFO");

			if (searchVO.getUserId() == null) {
				searchVO.setUserId(user.getUserId());
			}

			// 월 일 0x일 포맷팅
			if (searchVO.getStartMM() != null) {
				if (Integer.parseInt(searchVO.getStartMM()) < 10) {
					String needu = searchVO.getStartMM();
					searchVO.setStartMM('0' + needu);
				}
				if (Integer.parseInt(searchVO.getEndMM()) < 10) {
					String needu = searchVO.getEndMM();
					searchVO.setEndMM('0' + needu);
				}
				if (Integer.parseInt(searchVO.getStartDD()) < 10) {
					String needu = searchVO.getStartDD();
					searchVO.setStartDD('0' + needu);
				}
				if (Integer.parseInt(searchVO.getEndDD()) < 10) {
					String needu = searchVO.getEndDD();
					searchVO.setEndDD('0' + needu);
				}
			}

			logger.debug("searchVO = {}", searchVO);
			List<PurchaseVO> list = purchaseService.getPurchaseList(searchVO);
			for (int i = 0; i < list.size(); i++) {
				String str = list.get(i).getPDeliveryNum();
				logger.debug("list = {}", str);
			}

			logger.info("list size = {}", list.size());

			model.addAttribute("searchVO", searchVO);
			model.addAttribute("list", list);

			return "/purchase/purchaseList";
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			e.printStackTrace();
			return "redirect:/";

		}
	}

	@RequestMapping(value = "/purchasePage")
	public String purchaseInsertPage(ModelMap model, PurchaseSearchVO searchVO, HttpSession session,
			@RequestParam("qty") int qty, @RequestParam("sCode") String sCode) {
		logger.debug("qty = {}", qty);
		logger.debug("sCode = {}", sCode);
		//memberVO를 불러오기위한 session에서 userId 뽑아오기
		String userId = ((UserVO) session.getAttribute("USER_INFO")).getUserId();
		logger.debug("userId = {}", userId);
		MemberVO mem = memberService.getMember(userId);
		MarketVO market = iMarketService.getMarket(sCode);

		
		model.addAttribute("mem", mem);
		model.addAttribute("qty", qty);
		model.addAttribute("market", market);
		
		return "/purchase/purchasePage";
	}

	@RequestMapping(value = "/purchaseEnd")
	public String purchaseInsert(ModelMap model, PurchaseSearchVO searchVO, HttpSession session, PurchaseVO purchaseVO) {
		//memberVO를 불러오기위한 session에서 userId 뽑아오기
		String userId = ((UserVO) session.getAttribute("USER_INFO")).getUserId();
		logger.debug("userId = {}", userId);
		logger.debug("purchaseVO = {}", purchaseVO.getPAddMileage());
		logger.debug("purchaseVO = {}", purchaseVO.getPArriveAdd1());
		logger.debug("purchaseVO = {}", purchaseVO.getPArriveAdd2());
		logger.debug("purchaseVO = {}", purchaseVO.getPArriveHP());
		logger.debug("purchaseVO = {}", purchaseVO.getPArriveName());
		logger.debug("purchaseVO = {}", purchaseVO.getPArriveZip());
		MemberVO mem = memberService.getMember(userId);
		
		
		model.addAttribute("mem", mem);
		
		return "/purchase/purchaseEnd";
	}
}
