package com.zero.reply.web;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.zero.common.exception.BizAccessFailException;
import com.zero.common.exception.BizException;
import com.zero.common.exception.BizNotFoundException;
import com.zero.login.vo.UserVO;
import com.zero.market.vo.MarketVO;
import com.zero.purchase.vo.PurchaseSearchVO;
import com.zero.reply.vo.ReplySearchVO;
import com.zero.reply.vo.ReplyVO;
import com.zero.util.FileUtils;
import com.zero.util.ReviewFileUtils;
import com.zero.reply.service.IReplyService;

@Controller
public class ReplyController {

	private final Logger logger = LoggerFactory.getLogger(getClass());

	@Autowired
	private IReplyService replyService;
	
	@Resource(name="ReviewFileUtils")
	private ReviewFileUtils fileUtils;

	@RequestMapping(value = "/reply/replyList", produces = "application/json;charset=UTF-8")
	@ResponseBody
	public Map<String, Object> replyList(ReplySearchVO searchVO) throws Exception {

		logger.debug("searchVO={}", searchVO);

		List<ReplyVO> list = replyService.getReplyList(searchVO);

		Map<String, Object> map = new HashMap<String, Object>();
		map.put("result", true);
		map.put("data", list);
		map.put("count", list.size());

		return map; // reply/replyList
	}

	@RequestMapping(value = "/reply/replyRegist", method = RequestMethod.POST)
	public String replyRegist(ModelMap model, ReplyVO reply, MultipartHttpServletRequest mpRequest, HttpServletRequest req, HttpSession session,
			@RequestParam("sCode") String sCode) {
//		fileInfo2Board
		// TOOD : 로그인 정보 확인 처리
		UserVO user = (UserVO) session.getAttribute("USER_INFO");
		reply.setSrMemId(user.getUserId()); // user.getUserId();
		reply.setSrSCode(sCode);
		logger.debug("sCode = {}", sCode);

		try {
			fileUtils.fileInfo2Board(reply, mpRequest);
		} catch (Exception e) {
			e.printStackTrace();
		}

		replyService.registReply(reply);
		/*
		 * Map<String, Object> map = new HashMap<String, Object>(); map.put("result",
		 * true); // map.put("data", replyService.getReply(reply.getReNo()));
		 * map.put("msg", "정상 등록 되었습니다.");
		 */

		return "redirect:/market/marketView1?sCode=" + reply.getSrSCode(); // reply/replyList  "/mfboard/mfMain"; redirect:/mfboard/mfView?mfCode= + reply
	}

	@RequestMapping(value = "/reply/replyRemove")

	public Map<String, Object> replyRemove(ReplyVO reply, HttpSession session) {

		UserVO user = (UserVO) session.getAttribute("USER_INFO");
		reply.setSrMemId(user.getUserId()); // user.getUserId();
		Map<String, Object> map = new HashMap<String, Object>();

		try {
			replyService.removeReply(reply);
			map.put("result", true);
			map.put("msg", "정상 삭제 되었습니다.");
			return map;
		} catch (BizNotFoundException e) {
			map.put("result", false);
			map.put("msg", "글이 존재하지 않습니다.");
			return map;
		} catch (BizAccessFailException e) {
			map.put("result", false);
			map.put("msg", "접근에 실패했습니다.");
			return map;
		}
	}

	@RequestMapping(value = "/reply/replyModify")

	public Map<String, Object> replyModify(ReplyVO reply, HttpSession session) {

		UserVO user = (UserVO) session.getAttribute("USER_INFO");
		reply.setSrMemId(user.getUserId()); // user.getUserId();
		Map<String, Object> map = new HashMap<String, Object>();

		try {
			replyService.modifyReply(reply);
			map.put("result", true);
			map.put("msg", "수정 완료 되었습니다.");
			return map;
		} catch (BizNotFoundException e) {
			map.put("result", false);
			map.put("msg", "글이 존재하지 않습니다.");
			return map;
		} catch (BizAccessFailException e) {
			map.put("result", false);
			map.put("msg", "접근에 실패했습니다.");
			return map;
		}
	}

}
