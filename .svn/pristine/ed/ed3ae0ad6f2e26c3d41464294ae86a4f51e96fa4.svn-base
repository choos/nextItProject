package com.zero.ufboard.web;

import java.net.URLDecoder;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.apache.commons.beanutils.BeanUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.zero.common.exception.BizDuplicateException;
import com.zero.common.exception.BizRegistFailException;
import com.zero.common.service.ICommonCodeService;
import com.zero.common.vo.CodeVO;
import com.zero.common.vo.ResultMessageVO;
import com.zero.login.vo.UserVO;
import com.zero.market.vo.MarketSearchVO;
import com.zero.market.vo.MarketVO;
import com.zero.ufboard.service.IUFBoardService;
import com.zero.ufboard.vo.UFBoardVO;
import com.zero.ufboard.vo.UFSearchVO;
import com.zero.util.FileUtils;

@Controller
@RequestMapping("/user")
public class userMainController {
	@Autowired
	private IUFBoardService iUFBoardService;
	
	@Autowired
	private ICommonCodeService codeDao;
	
	@Resource(name="fileUtils")
	private FileUtils fileUtils;
	
	private final Logger logger = LoggerFactory.getLogger(getClass());
	
	@RequestMapping("userMain")
	public String main(ModelMap model, UFSearchVO searchVO, HttpSession session) throws Exception {
		
		logger.debug("debug searchVO : {}", searchVO);
		List<UFBoardVO> board = iUFBoardService.getBoardList(searchVO);
		
		UserVO member = (UserVO) session.getAttribute("USER_INFO");
		
		model.addAttribute("member", member);

		model.addAttribute("board", board);
		model.addAttribute("searchVO", searchVO);
		
		 return "user/userMain";
	}
	
	@RequestMapping(value = "userSearch", params = "ufCategory")
	public String main2(ModelMap model, UFSearchVO searchVO, HttpSession session, @RequestParam("ufCategory")String ufCategory) throws Exception {
		searchVO.setSearchCategory(ufCategory);
		
		logger.debug("debug searchVO : {}", searchVO);
		List<UFBoardVO> board = iUFBoardService.getBoardList(searchVO);
		
		UserVO member = (UserVO) session.getAttribute("USER_INFO");
		
		model.addAttribute("member", member);

		model.addAttribute("board", board);
		model.addAttribute("searchVO", searchVO);
		
		 return "user/userMain";
	}
	
	
	@RequestMapping(value = "/userEdit")
	public String userEdit(String ufCode, ModelMap model) throws Exception {
		UFBoardVO board = iUFBoardService.getBoard(ufCode);
		
		if (board.getUfLink() != null) {
			String word = board.getUfLink().replace("<iframe width=\"500\" height=\"350\" src=\"","").replace("\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","").replace("/embed","/watch?v=");
			board.setUfLink(word);
		}
		
		List<CodeVO> a = codeDao.getCodeListByParent("UC00");
		
		
		model.addAttribute("board", board);
		model.addAttribute("catList", a);
		
		
		return "user/userEdit";
	}
	
	@RequestMapping(value = "/userRegist", method = RequestMethod.POST, params = "dup_key")
	public String userRegist(UFBoardVO board,HttpSession session,  MultipartHttpServletRequest mpRequest, ModelMap model, 
													@RequestParam("dup_key")	String p_dup_key, CodeVO code ) throws Exception {
		
		logger.info("info Regist:{}, VO:{}", model, board);
		logger.info("p_dup_key : {}", p_dup_key);
		
//		iUFBoardService.write(board, mpRequest);
		//HttpSession session =req.getSession();
		
		//중복방지 토큰 확인

		String s_dup_key = (String)session.getAttribute("DUP_SUBMIT_PREVENT");

		
		if(p_dup_key==null || p_dup_key.isEmpty()){
			
			return "redirect:/";	//서블릿 서비스 메서드에서
		}else{
			if(s_dup_key == null || !s_dup_key.equals(p_dup_key)){
				ResultMessageVO message = new ResultMessageVO();
				message.setResult(false)
							 .setTitle("중복등록")
							 .setMessage("새롭게 작성해 주세요")
							 .setUrl("/user/userForm")
							 .setUrlTitle("새글등록");
				
				model.addAttribute("resultMessage", message);
				return "common/message";
			}
		}
		
		try {
			// 첨부파일 VO 유저VO에 셋팅
			
			fileUtils.fileInfo2Board(board, mpRequest);
			
			if(!board.getUfLink().isEmpty()) {
				board.setUfLink(board.getUfLink().replace("https://www.youtube.com/watch?v=", "<iframe width=\"500\" height=\"350\" src=\"https://www.youtube.com/embed/")+("\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>"));
				}

			iUFBoardService.registBoard(board);
			session.removeAttribute("DUP_SUBMIT_PREVENT");
			board.setUfCode("U"+String.valueOf(board.getUfNum()));
			
			return "redirect:/user/userView?ufCode=" + board.getUfCode();
		} catch (BizDuplicateException e) {
			ResultMessageVO message = new ResultMessageVO();
			message.setResult(false)
						 .setTitle("중복등록")
						 .setMessage("해당 키가 중복되었습니다. 다른 키를 사용해주세요");			
			model.addAttribute("resultMessage", message);
			return "common/message";
		}	catch (BizRegistFailException e) {
			ResultMessageVO message = new ResultMessageVO();
			message.setResult(false)
						 .setTitle("중복등록")
						 .setMessage("게시판 등록에 실패했습니다")
						 .setUrl("/userMain")
						 .setUrlTitle("목록으로");
			
			model.addAttribute("resultMessage", message);
			return "common/message";
		}
	}

	
	@RequestMapping(value = "/userModify", method = RequestMethod.POST)
	public String userModify(@ModelAttribute("user") @Valid UFBoardVO board, BindingResult errors, MultipartHttpServletRequest mpRequest, ModelMap model) throws Exception {
		try {


			if(errors.hasErrors()) {
				return "user/userEdit";
			}
			fileUtils.fileInfo2Board(board, mpRequest);

			
			if(!board.getUfLink().isEmpty()) {
				board.setUfLink(board.getUfLink().replace("https://www.youtube.com/watch?v=", "<iframe width=\"500\" height=\"350\" src=\"https://www.youtube.com/embed/\"")+("\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>"));

				}
			
			iUFBoardService.updateBoard(board);
			return "redirect:userMain?msg=" + URLDecoder.decode("success", "utf-8");
		} catch (BizRegistFailException e) {
			e.printStackTrace();
			ResultMessageVO message = new ResultMessageVO();
			message.setResult(false)
						 .setTitle("수정실패")
						 .setMessage("게시글 수정에 실패했습니다")
						 .setUrl("/user/userMain")
						 .setUrlTitle("목록으로");
			
			model.addAttribute("resultMessage", message);
			return "common/message";
		}
	}
	
	@RequestMapping(value = "/userDelete", params = "ufCode")
	public String process(HttpServletRequest req, HttpServletResponse resp) throws Exception {
		
		
		UFBoardVO board = new UFBoardVO();
		BeanUtils.populate(board, req.getParameterMap());
		int res = iUFBoardService.deleteBoard(board);

		
		
		
		if(res>0) {
			ResultMessageVO message = new ResultMessageVO();
			message.setResult(true)
							.setTitle("삭제성공")
							.setMessage("해당글을 삭제했습니다.")
							.setUrl("/user/userMain")
							.setUrlTitle("목록으로");
			req.setAttribute("resultMessage", message);
			return "common/message";		
			} else {
			ResultMessageVO message = new ResultMessageVO();
			message.setResult(false)
						 .setTitle("삭제실패")
						 .setMessage("글이 존재하지 않거나 패스워드가 틀립니다")
						 .setUrl("usre/usreMain")
						 .setUrlTitle("목록으로");
			
			req.setAttribute("resultMessage", message);
			return "common/message";
		}
		
	}
	
	
	
	
}
